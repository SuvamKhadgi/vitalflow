// Mocks generated by Mockito 5.4.5 from annotations
// in vitalflow/test/features/auth/presentation/view_model/login/login_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i14;

import 'package:bloc/bloc.dart' as _i17;
import 'package:dartz/dartz.dart' as _i4;
import 'package:flutter/foundation.dart' as _i12;
import 'package:flutter/material.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:vitalflow/app/shared_prefs/token_shared_prefs.dart' as _i3;
import 'package:vitalflow/core/error/failure.dart' as _i15;
import 'package:vitalflow/features/auth/domain/repository/auth_repoitory.dart'
    as _i2;
import 'package:vitalflow/features/auth/domain/use_case/login_usecase.dart'
    as _i13;
import 'package:vitalflow/features/auth/presentation/view_model/signup/signup_bloc.dart'
    as _i10;
import 'package:vitalflow/features/home/domain/use_case/delete_cart_item_use_case.dart'
    as _i8;
import 'package:vitalflow/features/home/domain/use_case/get_cart_use_case.dart'
    as _i6;
import 'package:vitalflow/features/home/domain/use_case/get_items_usecase.dart'
    as _i5;
import 'package:vitalflow/features/home/domain/use_case/save_cart_use_case.dart'
    as _i7;
import 'package:vitalflow/features/home/presentation/view_model/home_bloc.dart'
    as _i16;
import 'package:vitalflow/features/home/presentation/view_model/home_state.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIAuthRepoitory_0 extends _i1.SmartFake
    implements _i2.IAuthRepoitory {
  _FakeIAuthRepoitory_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTokenSharedPrefs_1 extends _i1.SmartFake
    implements _i3.TokenSharedPrefs {
  _FakeTokenSharedPrefs_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetItemsUseCase_3 extends _i1.SmartFake
    implements _i5.GetItemsUseCase {
  _FakeGetItemsUseCase_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetCartUseCase_4 extends _i1.SmartFake
    implements _i6.GetCartUseCase {
  _FakeGetCartUseCase_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSaveCartUseCase_5 extends _i1.SmartFake
    implements _i7.SaveCartUseCase {
  _FakeSaveCartUseCase_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteCartItemUseCase_6 extends _i1.SmartFake
    implements _i8.DeleteCartItemUseCase {
  _FakeDeleteCartItemUseCase_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHomeState_7 extends _i1.SmartFake implements _i9.HomeState {
  _FakeHomeState_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSignupState_8 extends _i1.SmartFake implements _i10.SignupState {
  _FakeSignupState_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_9 extends _i1.SmartFake implements _i11.Widget {
  _FakeWidget_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString(
          {_i11.DiagnosticLevel? minLevel = _i11.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_10 extends _i1.SmartFake
    implements _i11.InheritedWidget {
  _FakeInheritedWidget_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString(
          {_i11.DiagnosticLevel? minLevel = _i11.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_11 extends _i1.SmartFake
    implements _i11.DiagnosticsNode {
  _FakeDiagnosticsNode_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i12.TextTreeConfiguration? parentConfiguration,
    _i11.DiagnosticLevel? minLevel = _i11.DiagnosticLevel.info,
  }) =>
      super.toString();
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i13.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IAuthRepoitory get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeIAuthRepoitory_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.IAuthRepoitory);

  @override
  _i3.TokenSharedPrefs get tokenSharedPrefs => (super.noSuchMethod(
        Invocation.getter(#tokenSharedPrefs),
        returnValue: _FakeTokenSharedPrefs_1(
          this,
          Invocation.getter(#tokenSharedPrefs),
        ),
      ) as _i3.TokenSharedPrefs);

  @override
  _i14.Future<_i4.Either<_i15.Failure, String>> call(
          _i13.LoginParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i14.Future<_i4.Either<_i15.Failure, String>>.value(
            _FakeEither_2<_i15.Failure, String>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i14.Future<_i4.Either<_i15.Failure, String>>);
}

/// A class which mocks [HomeBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeBloc extends _i1.Mock implements _i16.HomeBloc {
  MockHomeBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.GetItemsUseCase get getItemsUseCase => (super.noSuchMethod(
        Invocation.getter(#getItemsUseCase),
        returnValue: _FakeGetItemsUseCase_3(
          this,
          Invocation.getter(#getItemsUseCase),
        ),
      ) as _i5.GetItemsUseCase);

  @override
  _i6.GetCartUseCase get getCartUseCase => (super.noSuchMethod(
        Invocation.getter(#getCartUseCase),
        returnValue: _FakeGetCartUseCase_4(
          this,
          Invocation.getter(#getCartUseCase),
        ),
      ) as _i6.GetCartUseCase);

  @override
  _i7.SaveCartUseCase get saveCartUseCase => (super.noSuchMethod(
        Invocation.getter(#saveCartUseCase),
        returnValue: _FakeSaveCartUseCase_5(
          this,
          Invocation.getter(#saveCartUseCase),
        ),
      ) as _i7.SaveCartUseCase);

  @override
  _i8.DeleteCartItemUseCase get deleteCartItemUseCase => (super.noSuchMethod(
        Invocation.getter(#deleteCartItemUseCase),
        returnValue: _FakeDeleteCartItemUseCase_6(
          this,
          Invocation.getter(#deleteCartItemUseCase),
        ),
      ) as _i8.DeleteCartItemUseCase);

  @override
  set userId(String? _userId) => super.noSuchMethod(
        Invocation.setter(
          #userId,
          _userId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.HomeState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeHomeState_7(
          this,
          Invocation.getter(#state),
        ),
      ) as _i9.HomeState);

  @override
  _i14.Stream<_i9.HomeState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i14.Stream<_i9.HomeState>.empty(),
      ) as _i14.Stream<_i9.HomeState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i16.HomeEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i16.HomeEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i9.HomeState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i16.HomeEvent>(
    _i17.EventHandler<E, _i9.HomeState>? handler, {
    _i17.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i17.Transition<_i16.HomeEvent, _i9.HomeState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i14.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);

  @override
  void onChange(_i17.Change<_i9.HomeState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SignUpBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignUpBloc extends _i1.Mock implements _i10.SignUpBloc {
  MockSignUpBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.SignupState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeSignupState_8(
          this,
          Invocation.getter(#state),
        ),
      ) as _i10.SignupState);

  @override
  _i14.Stream<_i10.SignupState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i14.Stream<_i10.SignupState>.empty(),
      ) as _i14.Stream<_i10.SignupState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i10.SignupEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i10.SignupEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i10.SignupState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i10.SignupEvent>(
    _i17.EventHandler<E, _i10.SignupState>? handler, {
    _i17.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i17.Transition<_i10.SignupEvent, _i10.SignupState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i14.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);

  @override
  void onChange(_i17.Change<_i10.SignupState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i11.BuildContext {
  MockBuildContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_9(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i11.Widget);

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
      ) as bool);

  @override
  _i11.InheritedWidget dependOnInheritedElement(
    _i11.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_10(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i11.InheritedWidget);

  @override
  void visitAncestorElements(_i11.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i11.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispatchNotification(_i11.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.DiagnosticsNode describeElement(
    String? name, {
    _i12.DiagnosticsTreeStyle? style = _i12.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_11(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i11.DiagnosticsNode);

  @override
  _i11.DiagnosticsNode describeWidget(
    String? name, {
    _i12.DiagnosticsTreeStyle? style = _i12.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_11(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i11.DiagnosticsNode);

  @override
  List<_i11.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i11.DiagnosticsNode>[],
      ) as List<_i11.DiagnosticsNode>);

  @override
  _i11.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_11(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i11.DiagnosticsNode);
}
