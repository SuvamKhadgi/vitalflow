// Mocks generated by Mockito 5.4.5 from annotations
// in vitalflow/test/features/home/presentation/view/home_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;

import 'package:bloc/bloc.dart' as _i11;
import 'package:flutter/src/services/binary_messenger.dart' as _i8;
import 'package:flutter/src/services/message_codec.dart' as _i7;
import 'package:flutter/src/services/platform_channel.dart' as _i13;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i14;
import 'package:vitalflow/app/my_app.dart' as _i12;
import 'package:vitalflow/features/home/domain/use_case/delete_cart_item_use_case.dart'
    as _i5;
import 'package:vitalflow/features/home/domain/use_case/get_cart_use_case.dart'
    as _i3;
import 'package:vitalflow/features/home/domain/use_case/get_items_usecase.dart'
    as _i2;
import 'package:vitalflow/features/home/domain/use_case/save_cart_use_case.dart'
    as _i4;
import 'package:vitalflow/features/home/presentation/view_model/home_bloc.dart'
    as _i9;
import 'package:vitalflow/features/home/presentation/view_model/home_state.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetItemsUseCase_0 extends _i1.SmartFake
    implements _i2.GetItemsUseCase {
  _FakeGetItemsUseCase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetCartUseCase_1 extends _i1.SmartFake
    implements _i3.GetCartUseCase {
  _FakeGetCartUseCase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSaveCartUseCase_2 extends _i1.SmartFake
    implements _i4.SaveCartUseCase {
  _FakeSaveCartUseCase_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteCartItemUseCase_3 extends _i1.SmartFake
    implements _i5.DeleteCartItemUseCase {
  _FakeDeleteCartItemUseCase_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHomeState_4 extends _i1.SmartFake implements _i6.HomeState {
  _FakeHomeState_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMethodCodec_5 extends _i1.SmartFake implements _i7.MethodCodec {
  _FakeMethodCodec_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBinaryMessenger_6 extends _i1.SmartFake
    implements _i8.BinaryMessenger {
  _FakeBinaryMessenger_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeBloc extends _i1.Mock implements _i9.HomeBloc {
  MockHomeBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetItemsUseCase get getItemsUseCase => (super.noSuchMethod(
        Invocation.getter(#getItemsUseCase),
        returnValue: _FakeGetItemsUseCase_0(
          this,
          Invocation.getter(#getItemsUseCase),
        ),
      ) as _i2.GetItemsUseCase);

  @override
  _i3.GetCartUseCase get getCartUseCase => (super.noSuchMethod(
        Invocation.getter(#getCartUseCase),
        returnValue: _FakeGetCartUseCase_1(
          this,
          Invocation.getter(#getCartUseCase),
        ),
      ) as _i3.GetCartUseCase);

  @override
  _i4.SaveCartUseCase get saveCartUseCase => (super.noSuchMethod(
        Invocation.getter(#saveCartUseCase),
        returnValue: _FakeSaveCartUseCase_2(
          this,
          Invocation.getter(#saveCartUseCase),
        ),
      ) as _i4.SaveCartUseCase);

  @override
  _i5.DeleteCartItemUseCase get deleteCartItemUseCase => (super.noSuchMethod(
        Invocation.getter(#deleteCartItemUseCase),
        returnValue: _FakeDeleteCartItemUseCase_3(
          this,
          Invocation.getter(#deleteCartItemUseCase),
        ),
      ) as _i5.DeleteCartItemUseCase);

  @override
  set userId(String? _userId) => super.noSuchMethod(
        Invocation.setter(
          #userId,
          _userId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.HomeState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeHomeState_4(
          this,
          Invocation.getter(#state),
        ),
      ) as _i6.HomeState);

  @override
  _i10.Stream<_i6.HomeState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i10.Stream<_i6.HomeState>.empty(),
      ) as _i10.Stream<_i6.HomeState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i9.HomeEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i9.HomeEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i6.HomeState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i9.HomeEvent>(
    _i11.EventHandler<E, _i6.HomeState>? handler, {
    _i11.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i11.Transition<_i9.HomeEvent, _i6.HomeState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  void onChange(_i11.Change<_i6.HomeState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ThemeCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeCubit extends _i1.Mock implements _i12.ThemeCubit {
  MockThemeCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: false,
      ) as bool);

  @override
  _i10.Stream<bool> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i10.Stream<bool>.empty(),
      ) as _i10.Stream<bool>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void toggleTheme() => super.noSuchMethod(
        Invocation.method(
          #toggleTheme,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(bool? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i11.Change<bool>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);
}

/// A class which mocks [EventChannel].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventChannel extends _i1.Mock implements _i13.EventChannel {
  MockEventChannel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  _i7.MethodCodec get codec => (super.noSuchMethod(
        Invocation.getter(#codec),
        returnValue: _FakeMethodCodec_5(
          this,
          Invocation.getter(#codec),
        ),
      ) as _i7.MethodCodec);

  @override
  _i8.BinaryMessenger get binaryMessenger => (super.noSuchMethod(
        Invocation.getter(#binaryMessenger),
        returnValue: _FakeBinaryMessenger_6(
          this,
          Invocation.getter(#binaryMessenger),
        ),
      ) as _i8.BinaryMessenger);

  @override
  _i10.Stream<dynamic> receiveBroadcastStream([dynamic arguments]) =>
      (super.noSuchMethod(
        Invocation.method(
          #receiveBroadcastStream,
          [arguments],
        ),
        returnValue: _i10.Stream<dynamic>.empty(),
      ) as _i10.Stream<dynamic>);
}
